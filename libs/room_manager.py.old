#!/usr/bin/env python
# -*- encoding: utf-8 -*-
# vim: set et sw=4 ts=4 sts=4 ff=unix fenc=utf8:
# Author: Binux<i@binux.me>
#         http://binux.me
# Created on 2013-04-22 16:15:32
import logging
import cPickle
import base64
import pymongo


class RoomManager(object):
    def __init__(self):
        self.rooms = {}

    def new(self, meta):
        if meta['hash'] in self.rooms:
            if self.rooms[meta['hash']].sha1_array == meta['sha1_array']:
		logging.debug('get: %s' % self.rooms)
		self.class_to_base(self.rooms[meta['hash']], meta['hash'])
                return self.rooms[meta['hash']]
            else:
                return None
        else:
            self.rooms[meta['hash']] = Room(meta['hash'], meta)
	    logging.debug('new: %s' % self.rooms)
	    self.class_to_base(self.rooms[meta['hash']], meta['hash'])
            return self.rooms[meta['hash']]

    def delete(self, roomid):
	logging.debug('delete: %s' % roomid)
        if roomid in self.rooms:
            del self.rooms[roomid]

    def get(self, roomid):
	logging.debug('get: %s' % roomid)
        return self.rooms.get(roomid)

    def keys(self):
	logging.debug('keys: %s' % self.rooms.keys())
        return self.rooms.keys()

    def class_to_base(self, obj_class, roomid):
	conn = pymongo.Connection()
	db = conn.mydb
	coll = db.mycoll

	s = cPickle.dumps(obj_class, cPickle.HIGHEST_PROTOCOL)
	encoded = base64.b64encode(s)
	doc = {'hash': roomid, 'room': encoded}

        if coll.find({'hash': roomid}).count() > 0:
	    record = coll.find({'hash': roomid})[0]
	    if record:
		logging.debug('room exist: %s' % record['room'])
		coll.update({'hash': roomid}, doc)
		logging.debug('update room to database: %s' % doc)
	else:
	    coll.save(doc)
	    logging.debug('new room to database: %s' % doc)


    def base_to_class(self, roomid):
	conn = pymongo.Connection()
	db = conn.mydb
	coll = db.mycoll

        if coll.find({'hash': roomid}).count() > 0:
            record = coll.find({'hash': roomid})[0]
            if record:
                logging.debug('get room from database: %s' % record['room'])
		decoded=base64.b64decode(record['room'])
                return cPickle.loads(decoded)
            else:
                return None
        else:
            return None


class Room(object):
    def __init__(self, id, meta):
        for each in ('hash', 'sha1_array', 'filename', 'piece_size', 'block_size', 'size', 'type'):
            setattr(self, each, meta[each])

        self.id = id
        self.meta = meta
        self.title = self.filename
        self.peers = {}

    def join(self, peerid, ws):
	logging.debug('Room.join: %s' % peerid)
        self.peers[peerid] = Peer(peerid, ws)
	debugger
	self.class_to_base(self, self.id)
        return self.peers[peerid]

    def leave(self, peerid):
	logging.debug('Room.leave: %s' % peerid)
        if peerid in self.peers:
            del self.peers[peerid]
	    self.class_to_base(self, self.id)

    def get(self, peerid):
	logging.debug('Room.get: %s' % peerid)
        return self.peers.get(peerid)

    def peer_list(self):
	logging.debug('Room.peer_list: %s' % self.peers)
        result = {}
        for each in self.peers.itervalues():
            result[each.peerid] = {
                    'bitmap': each.bitmap,
                    }
        return result

class Peer(object):
    def __init__(self, peerid, ws):
        self.ws = ws
        self.peerid = peerid
        self.bitmap = ''
